{"version":3,"sources":["serviceWorker.ts","redux/org/index.ts","redux/org/selectors.ts","redux/loading/selectors.ts","components/orgReposPage/InputOrg.tsx","components/orgReposPage/CardRepos.tsx","pages/OrgReposPage.tsx","App.tsx","redux/loading/index.ts","redux/store.ts","api/api.js","redux/org/sagas.ts","redux/sagas.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","orgSlice","createSlice","name","initialState","org","repos","orgInfo","page","reducers","setOrg","state","action","payload","setRepos","setOrgInfo","setPage","actions","types","fetchRepos","type","getReposSelector","getOrgInfoSelector","getOrgSelector","getPageSelector","isLoaderSelector","loader","isErrorSelector","error","InputOrg","dispatch","useDispatch","useSelector","Card","Grid","style","margin","container","spacing","item","xs","TextField","required","label","id","defaultValue","onChange","e","target","value","Button","variant","color","onClick","blog","src","avatar_url","width","alt","description","href","CardRepos","loading","LinearProgress","length","map","key","CardContent","Typography","component","html_url","Icon","forks","watchers","stargazers_count","public_repos","Pagination","count","Math","ceil","defaultPage","boundaryCount","n","OrgReposPage","md","App","Container","loaderSlice","showLoader","hideLoader","setError","noError","reducer","combineReducers","instance","axios","create","baseURL","orgAPI","get","sagaRepos","sagaOrgInfo","put","select","call","data","console","log","all","takeEvery","fork","orgSagas","saga","createSagaMiddleware","store","configureStore","middleware","run","rootSaga","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7a971f11.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst orgSlice = createSlice({\n  name: \"org\",\n  initialState: {\n    org: \"github\",\n    repos: [],\n    orgInfo: {},\n    page: 1,\n  },\n  reducers: {\n    setOrg(state, action) {\n      const { payload } = action;\n      state.org = payload;\n    },\n    setRepos(state, action) {\n      const { payload } = action;\n      state.repos = payload;\n    },\n    setOrgInfo(state, action) {\n      const { payload } = action;\n      state.orgInfo = payload;\n    },\n    setPage(state, action) {\n      const { payload } = action;\n      state.page = payload;\n    },\n  },\n});\nexport const { setOrg, setRepos, setOrgInfo, setPage } = orgSlice.actions;\nexport default orgSlice.reducer;\n\n//sagas\nexport const types = {\n  FETCH_REPOS: \"FETCH_REPOS\",\n  FETCH_ORG_INFO: \"FETCH_ORG_INFO\",\n};\nconst fetchRepos = () => {\n  return {\n    type: types.FETCH_REPOS,\n  };\n};\nconst fetchOrgInfo = () => {\n  return {\n    type: types.FETCH_ORG_INFO,\n  };\n};\nexport { fetchRepos, fetchOrgInfo };\n","export const getReposSelector = (state: any) => state.org.repos;\nexport const getOrgInfoSelector = (state: any) => state.org.orgInfo;\nexport const getOrgSelector = (state: any) => state.org.org;\nexport const getPageSelector = (state: any) => state.org.page;\n","export const isLoaderSelector = (state: any) => state.loader.loader;\nexport const isErrorSelector = (state: any) => state.loader.error;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchOrgInfo, fetchRepos, setOrg, setPage } from \"../../redux/org\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport { getOrgInfoSelector } from \"../../redux/org/selectors\";\nimport { isErrorSelector } from \"../../redux/loading/selectors\";\n\nexport const InputOrg = () => {\n  const dispatch = useDispatch();\n  const orgInfo = useSelector(getOrgInfoSelector);\n  const error = useSelector(isErrorSelector);\n\n  return (\n    <Card>\n      <Grid style={{ margin: \"10px\" }} container spacing={2}>\n        <Grid item xs={12}>\n          <p> Company name</p>\n          <TextField\n            required\n            label=\"Required\"\n            id=\"org-value\"\n            defaultValue=\"github\"\n            onChange={(e) => dispatch(setOrg(e.target.value))}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              dispatch(setPage(1));\n\n              dispatch(fetchRepos());\n              dispatch(fetchOrgInfo());\n            }}\n          >\n            Show repos\n          </Button>\n        </Grid>\n        {!error ? (\n          orgInfo.blog ? (\n            <Grid item xs={12}>\n              <img\n                src={orgInfo.avatar_url}\n                style={{ width: \"200px\" }}\n                alt={\"img\"}\n              />\n              <p> {orgInfo.description}</p>\n              <p>\n                Blog: <a href={orgInfo.blog}>{orgInfo.blog}</a>\n              </p>\n            </Grid>\n          ) : (\n            <></>\n          )\n        ) : (\n          <div style={{ margin: \"10px\", color: \"red\" }}>\n            There is no such organization\n          </div>\n        )}\n      </Grid>\n    </Card>\n  );\n};\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getOrgInfoSelector,\n  getPageSelector,\n  getReposSelector,\n} from \"../../redux/org/selectors\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Icon from \"@material-ui/core/Icon\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport {\n  isErrorSelector,\n  isLoaderSelector,\n} from \"../../redux/loading/selectors\";\nimport { fetchRepos, setPage } from \"../../redux/org\";\n\nexport const CardRepos = () => {\n  const dispatch = useDispatch();\n  const repos = useSelector(getReposSelector);\n  const loading = useSelector(isLoaderSelector);\n  const page = useSelector(getPageSelector);\n  const orgInfo = useSelector(getOrgInfoSelector);\n  const error = useSelector(isErrorSelector);\n\n  if (loading) {\n    return <LinearProgress />;\n  }\n  if (error) {\n    return <></>;\n  }\n\n  if (repos.length) {\n    return (\n      <div>\n        {repos.map((value: any) => {\n          return (\n            <Card key={value.id} style={{ margin: \"10px\" }}>\n              <CardContent>\n                <Typography variant=\"h5\" component=\"h2\">\n                  {value.name}\n                </Typography>\n                <Typography>\n                  Url:\n                  <a href={value.html_url}>{value.html_url}</a>\n                </Typography>\n                <Typography>\n                  <Icon>call_split</Icon>\n                  {value.forks}\n                  <Icon>visibility</Icon>\n                  {value.watchers}\n                  <Icon>star_rate</Icon>\n                  {value.stargazers_count}\n                </Typography>\n              </CardContent>\n            </Card>\n          );\n        })}\n        {orgInfo.public_repos > 10 ? (\n          <Pagination\n            count={Math.ceil(orgInfo.public_repos / 10)}\n            defaultPage={page}\n            boundaryCount={2}\n            onChange={(e, n) => {\n              dispatch(setPage(n));\n              dispatch(fetchRepos());\n            }}\n          />\n        ) : (\n          <></>\n        )}\n      </div>\n    );\n  }\n  return <></>;\n};\n","import React from \"react\";\n\nimport { InputOrg } from \"../components/orgReposPage/InputOrg\";\nimport { CardRepos } from \"../components/orgReposPage/CardRepos\";\nimport Grid from \"@material-ui/core/Grid\";\n\nexport const OrgReposPage = () => {\n  return (\n    <div>\n      <Grid container spacing={3}>\n        <Grid item md={3} xs={12}>\n          <InputOrg />\n        </Grid>\n        <Grid item md={6} xs={12}>\n          <CardRepos />\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Container } from \"@material-ui/core\";\nimport { OrgReposPage } from \"./pages/OrgReposPage\";\n\nfunction App() {\n  return (\n    <Container>\n      <OrgReposPage />\n    </Container>\n  );\n}\n\nexport default App;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst loaderSlice = createSlice({\n  name: \"loader\",\n  initialState: {\n    loader: false,\n    error: false,\n  },\n  reducers: {\n    showLoader(state) {\n      state.loader = true;\n    },\n    hideLoader(state) {\n      state.loader = false;\n    },\n    setError(state) {\n      state.error = true;\n    },\n    noError(state) {\n      state.error = false;\n    },\n  },\n});\n\nexport const {\n  hideLoader,\n  showLoader,\n  setError,\n  noError,\n} = loaderSlice.actions;\n\nexport default loaderSlice.reducer;\n","import { combineReducers } from \"@reduxjs/toolkit\";\nimport org from \"./org\";\nimport loader from \"./loading\";\n\nexport const reducer = combineReducers({\n  org,\n  loader,\n});\n","import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"https://api.github.com\",\n});\n\nexport const orgAPI = {\n  getRepos({ org, page }) {\n    return instance.get(`/orgs/${org}/repos?per_page=10&page=${page}`);\n  },\n  getOrgInfo({ org }) {\n    return instance.get(`/orgs/${org}`);\n  },\n};\n","import { all, call, put, select, takeEvery } from \"redux-saga/effects\";\n\nimport { setOrgInfo, setRepos, types } from \"./index\";\nimport { hideLoader, noError, setError, showLoader } from \"../loading\";\nimport { orgAPI } from \"../../api/api\";\nimport { getOrgSelector, getPageSelector } from \"./selectors\";\n\nfunction* sagaRepos() {\n  try {\n    yield put(noError());\n    const org = yield select(getOrgSelector);\n    const page = yield select(getPageSelector);\n    yield put(showLoader());\n    const payload = yield call(orgAPI.getRepos, { org, page });\n    yield put(setRepos(payload.data));\n    yield put(hideLoader());\n  } catch (e) {\n    console.log(\"Что-то пошло не так\");\n    yield put(setError());\n    yield put(hideLoader());\n  }\n}\n\nfunction* sagaOrgInfo() {\n  try {\n    yield put(noError());\n    const org = yield select(getOrgSelector);\n    yield put(showLoader());\n    const payload = yield call(orgAPI.getOrgInfo, { org });\n    yield put(setOrgInfo(payload.data));\n    yield put(hideLoader());\n  } catch (e) {\n    console.log(\"Что-то пошло не так\");\n    yield put(setError());\n    yield put(hideLoader());\n  }\n}\n\nexport default function* () {\n  yield all([\n    yield takeEvery(types.FETCH_REPOS, sagaRepos),\n    yield takeEvery(types.FETCH_ORG_INFO, sagaOrgInfo),\n  ]);\n}\n","import { all, fork } from \"redux-saga/effects\";\n\nimport orgSagas from \"./org/sagas\";\n\nexport default function* () {\n  yield all([fork(orgSagas)]);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport App from \"./App\";\nimport { reducer } from \"./redux/store\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport rootSaga from \"./redux/sagas\";\n\nconst saga = createSagaMiddleware();\nconst store = configureStore({\n  middleware: [saga],\n  reducer,\n});\nsaga.run(rootSaga);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}